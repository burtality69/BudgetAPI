//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BudgeterAPI.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Transaction_frequencies> Transaction_frequencies { get; set; }
        public virtual DbSet<Transaction_types> Transaction_types { get; set; }
        public virtual DbSet<TransactionValue> TransactionValues { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
    
        public virtual ObjectResult<getforecast_Result> getforecast(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, string uSERID)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("Startdate", startdate) :
                new ObjectParameter("Startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getforecast_Result>("getforecast", startdateParameter, enddateParameter, uSERIDParameter);
        }
    
        [DbFunction("Entities", "Fn_GetforecastTransactions")]
        public virtual IQueryable<Fn_GetforecastTransactions_Result> Fn_GetforecastTransactions(Nullable<System.DateTime> sTARTDATE, Nullable<System.DateTime> eNDDATE, string uSERID)
        {
            var sTARTDATEParameter = sTARTDATE.HasValue ?
                new ObjectParameter("STARTDATE", sTARTDATE) :
                new ObjectParameter("STARTDATE", typeof(System.DateTime));
    
            var eNDDATEParameter = eNDDATE.HasValue ?
                new ObjectParameter("ENDDATE", eNDDATE) :
                new ObjectParameter("ENDDATE", typeof(System.DateTime));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_GetforecastTransactions_Result>("[Entities].[Fn_GetforecastTransactions](@STARTDATE, @ENDDATE, @USERID)", sTARTDATEParameter, eNDDATEParameter, uSERIDParameter);
        }
    
        public virtual ObjectResult<sp_getbudgets_Result> sp_getbudgets(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, string user)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getbudgets_Result>("sp_getbudgets", startdateParameter, enddateParameter, userParameter);
        }
    }
}
